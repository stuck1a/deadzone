###############################################################
###   DEAZONE ROADMAP FOR THE PACKAGE "deadzone.graphics"   ###
###############################################################

- Refactor font rendering (also fix all other shapes UV coords because we switched to stbi_set_flip_vertically_on_load = false)

  Vorab Umbauten:

  => Die aktuellen width-Values der einzelnen Characters sind zwar schon korrigiert, aber so richtig setzt er die Pen-Position noch nicht.

  => Sobald die PenPos gefixt ist, die Font-Texturen neu erzeugen mit UBFG. Dafür die Glyph-Klasse an das neue Datenformat anpassen.
     Zusätzlich soll Kerning integriert wird. Kerning beschreibt für jeden Glyph eigene Offsets zum nächsten Character, je nachdem, was das für einer ist.
     Damit z.B. in "Text" das kleine "e" um 2px unter das große "T" geschoben wird, bekommt dann Kerning-Paar "T-e" den Wert 2.
     => Für UBFG-Texturen ist vermutlich XML die bessere Variante, um die Font-Definitionen zu erstellen


  Danach Refactoring:

  => Most important optimization: Pre-Calculate the normalized UV coordinates on font creation
  => They can be precalculated also for normalization within the global window space.
     But when doing so, then a logic is needed, which re-calculates these values of all existing IRenderables, whenever
     the window is resized.

  => Font Classes will be into a FontFamily class. FontFamily is used afterwards to set up a font for drawing and contains all
     variants like italic, bold and three base sizes of each font: small, medium, large
     Maybe use a separate Pen class to draw the text.
     Font drawing should then something like: drawText(FontFamily, x, y, text, italic, bold, size)
     Depending on the given size, the Pen or FontFamily class decides themself which base size variant it should use, to keep the scale
     value as small as possible (=better quality). It also need to calculate to proper scale value so that the rendered font is rendered
     in the given size (height) at the end.




- Implement vertex attributes for normal maps


- Implement loading and drawing of 3D objects (.obj files with vertex data, UV coordinates and normal map)


- ortho projection: Camera view is not yet 45° diagonal - fix as soon as textures/fonts are implemented, so that its easier to fix


- Read what function you have to execute in OpenGL for onResize to recalculate the window size
  and introduce a corresponding logic for this











___________________________________________________

Parameter for Ultimate Bitmap Font Generator:

Neue Font Textur

Schriftart: Arial
Styles*:    Normal, Bold (Italic through shader projection matrix - 16°)
Sizes:      20px   -  Normal
            70px   -  Large
Options:    Smooth: yes
            Auto-trim glyphs: yes
            Distance Field: none (0,0,0,0)
            Merging: yes
            BF-Merging: yes
            Heuristic: Top left
            Sorting: Height
            Image format: PNG
            Encoding: Unicode
            Output format: XML
            Transparent: yes
            Export kerning: yes
            Save inside XML: no


Characters:
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀΩↄ←↑→↓↔↕↨∂∆∏∑−∕∙√∞∟∩∫≈≠≡≤≥⌂⌐⌠⌡─│┌┐└┘├┤┬┴┼═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬▀▄█▌▐░▒▓■□▪▫▬▲►▼◄◊○◌●◘◙◦☺☻☼♀♂♠♣♥♦♪♫♯

After generation of the XML font definition file, kerning pairs with value of +1 (for large font size also "2")
will be removed, because those make around 90% of the entries and have basically no visible impact

___________________________________________________



